/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiladorLFT.node;

import java.util.*;
import compiladorLFT.analysis.*;

@SuppressWarnings("nls")
public final class ATipoDeclaracao extends PDeclaracao
{
    private PTipo _tipo_;
    private TDoisPontos _doisPontos_;
    private final LinkedList<PVarRepeat> _varRepeat_ = new LinkedList<PVarRepeat>();

    public ATipoDeclaracao()
    {
        // Constructor
    }

    public ATipoDeclaracao(
        @SuppressWarnings("hiding") PTipo _tipo_,
        @SuppressWarnings("hiding") TDoisPontos _doisPontos_,
        @SuppressWarnings("hiding") List<?> _varRepeat_)
    {
        // Constructor
        setTipo(_tipo_);

        setDoisPontos(_doisPontos_);

        setVarRepeat(_varRepeat_);

    }

    @Override
    public Object clone()
    {
        return new ATipoDeclaracao(
            cloneNode(this._tipo_),
            cloneNode(this._doisPontos_),
            cloneList(this._varRepeat_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATipoDeclaracao(this);
    }

    public PTipo getTipo()
    {
        return this._tipo_;
    }

    public void setTipo(PTipo node)
    {
        if(this._tipo_ != null)
        {
            this._tipo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tipo_ = node;
    }

    public TDoisPontos getDoisPontos()
    {
        return this._doisPontos_;
    }

    public void setDoisPontos(TDoisPontos node)
    {
        if(this._doisPontos_ != null)
        {
            this._doisPontos_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._doisPontos_ = node;
    }

    public LinkedList<PVarRepeat> getVarRepeat()
    {
        return this._varRepeat_;
    }

    public void setVarRepeat(List<?> list)
    {
        for(PVarRepeat e : this._varRepeat_)
        {
            e.parent(null);
        }
        this._varRepeat_.clear();

        for(Object obj_e : list)
        {
            PVarRepeat e = (PVarRepeat) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._varRepeat_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tipo_)
            + toString(this._doisPontos_)
            + toString(this._varRepeat_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tipo_ == child)
        {
            this._tipo_ = null;
            return;
        }

        if(this._doisPontos_ == child)
        {
            this._doisPontos_ = null;
            return;
        }

        if(this._varRepeat_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tipo_ == oldChild)
        {
            setTipo((PTipo) newChild);
            return;
        }

        if(this._doisPontos_ == oldChild)
        {
            setDoisPontos((TDoisPontos) newChild);
            return;
        }

        for(ListIterator<PVarRepeat> i = this._varRepeat_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVarRepeat) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
