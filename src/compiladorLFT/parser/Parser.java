/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiladorLFT.parser;

import compiladorLFT.lexer.*;
import compiladorLFT.node.*;
import compiladorLFT.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgramas node1 = (PProgramas) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgramas */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce ADeclaracoes */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list);
            }
            break;
            case 2: /* reduce AAvariaveisdeclaracao1Declaracao */
            {
                ArrayList<Object> list = new2();
                push(goTo(2), list);
            }
            break;
            case 3: /* reduce AAvariaveisdeclaracao2Declaracao */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list);
            }
            break;
            case 4: /* reduce AConstantesDeclaracao */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce AMultiploIdentificadores */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list);
            }
            break;
            case 6: /* reduce AComandos */
            {
                ArrayList<Object> list = new6();
                push(goTo(4), list);
            }
            break;
            case 7: /* reduce AIdentificadorVar */
            {
                ArrayList<Object> list = new7();
                push(goTo(5), list);
            }
            break;
            case 8: /* reduce AVetorVar */
            {
                ArrayList<Object> list = new8();
                push(goTo(5), list);
            }
            break;
            case 9: /* reduce AStringValor */
            {
                ArrayList<Object> list = new9();
                push(goTo(6), list);
            }
            break;
            case 10: /* reduce AInteiroValor */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list);
            }
            break;
            case 11: /* reduce ARealValor */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list);
            }
            break;
            case 12: /* reduce ASsimplesString */
            {
                ArrayList<Object> list = new12();
                push(goTo(7), list);
            }
            break;
            case 13: /* reduce AScharString */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list);
            }
            break;
            case 14: /* reduce AInteiroTipo */
            {
                ArrayList<Object> list = new14();
                push(goTo(8), list);
            }
            break;
            case 15: /* reduce AStringTipo */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list);
            }
            break;
            case 16: /* reduce ARealTipo */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list);
            }
            break;
            case 17: /* reduce ASimplesSequenciaComandos */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list);
            }
            break;
            case 18: /* reduce AExp1ExpAux */
            {
                ArrayList<Object> list = new18();
                push(goTo(10), list);
            }
            break;
            case 19: /* reduce AExpLogica1ExpAux */
            {
                ArrayList<Object> list = new19();
                push(goTo(10), list);
            }
            break;
            case 20: /* reduce ACasoSimplesExps */
            {
                ArrayList<Object> list = new20();
                push(goTo(11), list);
            }
            break;
            case 21: /* reduce ACasoMultiploExps */
            {
                ArrayList<Object> list = new21();
                push(goTo(11), list);
            }
            break;
            case 22: /* reduce AVariaveisSimplesVariaveis */
            {
                ArrayList<Object> list = new22();
                push(goTo(12), list);
            }
            break;
            case 23: /* reduce AVariaveisVariaveisVariaveis */
            {
                ArrayList<Object> list = new23();
                push(goTo(12), list);
            }
            break;
            case 24: /* reduce ARecebeComando */
            {
                ArrayList<Object> list = new24();
                push(goTo(13), list);
            }
            break;
            case 25: /* reduce ARecebeExplogComando */
            {
                ArrayList<Object> list = new25();
                push(goTo(13), list);
            }
            break;
            case 26: /* reduce AEscrevaComando */
            {
                ArrayList<Object> list = new26();
                push(goTo(13), list);
            }
            break;
            case 27: /* reduce AEscrevaExplogComando */
            {
                ArrayList<Object> list = new27();
                push(goTo(13), list);
            }
            break;
            case 28: /* reduce ALeiaComando */
            {
                ArrayList<Object> list = new28();
                push(goTo(13), list);
            }
            break;
            case 29: /* reduce ASeExplogComando */
            {
                ArrayList<Object> list = new29();
                push(goTo(13), list);
            }
            break;
            case 30: /* reduce ASeExplogSenaoComando */
            {
                ArrayList<Object> list = new30();
                push(goTo(13), list);
            }
            break;
            case 31: /* reduce AParaComando */
            {
                ArrayList<Object> list = new31();
                push(goTo(13), list);
            }
            break;
            case 32: /* reduce AParaPassoComando */
            {
                ArrayList<Object> list = new32();
                push(goTo(13), list);
            }
            break;
            case 33: /* reduce AEnquantoComando */
            {
                ArrayList<Object> list = new33();
                push(goTo(13), list);
            }
            break;
            case 34: /* reduce ARepitaExplogComando */
            {
                ArrayList<Object> list = new34();
                push(goTo(13), list);
            }
            break;
            case 35: /* reduce AAvalieExpComando */
            {
                ArrayList<Object> list = new35();
                push(goTo(13), list);
            }
            break;
            case 36: /* reduce AAvalieExplogComando */
            {
                ArrayList<Object> list = new36();
                push(goTo(13), list);
            }
            break;
            case 37: /* reduce AAvalieExpsnComando */
            {
                ArrayList<Object> list = new37();
                push(goTo(13), list);
            }
            break;
            case 38: /* reduce AAvalieExplogsnComando */
            {
                ArrayList<Object> list = new38();
                push(goTo(13), list);
            }
            break;
            case 39: /* reduce AEstrCaso */
            {
                ArrayList<Object> list = new39();
                push(goTo(14), list);
            }
            break;
            case 40: /* reduce ACasoSimplesSequenciaCaso */
            {
                ArrayList<Object> list = new40();
                push(goTo(15), list);
            }
            break;
            case 41: /* reduce ACasoMultiploSequenciaCaso */
            {
                ArrayList<Object> list = new41();
                push(goTo(15), list);
            }
            break;
            case 42: /* reduce ATermoExp */
            {
                ArrayList<Object> list = new42();
                push(goTo(16), list);
            }
            break;
            case 43: /* reduce AMaisExp */
            {
                ArrayList<Object> list = new43();
                push(goTo(16), list);
            }
            break;
            case 44: /* reduce AMenosExp */
            {
                ArrayList<Object> list = new44();
                push(goTo(16), list);
            }
            break;
            case 45: /* reduce AFatorTermo */
            {
                ArrayList<Object> list = new45();
                push(goTo(17), list);
            }
            break;
            case 46: /* reduce AMultTermo */
            {
                ArrayList<Object> list = new46();
                push(goTo(17), list);
            }
            break;
            case 47: /* reduce ADivTermo */
            {
                ArrayList<Object> list = new47();
                push(goTo(17), list);
            }
            break;
            case 48: /* reduce AVariavelFator */
            {
                ArrayList<Object> list = new48();
                push(goTo(18), list);
            }
            break;
            case 49: /* reduce AValorFator */
            {
                ArrayList<Object> list = new49();
                push(goTo(18), list);
            }
            break;
            case 50: /* reduce AExpFator */
            {
                ArrayList<Object> list = new50();
                push(goTo(18), list);
            }
            break;
            case 51: /* reduce AExpOuExpLogica */
            {
                ArrayList<Object> list = new51();
                push(goTo(19), list);
            }
            break;
            case 52: /* reduce AExpNaoOuExpLogica */
            {
                ArrayList<Object> list = new52();
                push(goTo(19), list);
            }
            break;
            case 53: /* reduce ACasoSimplesExpXor */
            {
                ArrayList<Object> list = new53();
                push(goTo(20), list);
            }
            break;
            case 54: /* reduce AXorExpXor */
            {
                ArrayList<Object> list = new54();
                push(goTo(20), list);
            }
            break;
            case 55: /* reduce ACasoSimplesExpOu */
            {
                ArrayList<Object> list = new55();
                push(goTo(21), list);
            }
            break;
            case 56: /* reduce AOuExpOu */
            {
                ArrayList<Object> list = new56();
                push(goTo(21), list);
            }
            break;
            case 57: /* reduce ACasoSimplesExpE */
            {
                ArrayList<Object> list = new57();
                push(goTo(22), list);
            }
            break;
            case 58: /* reduce AEExpE */
            {
                ArrayList<Object> list = new58();
                push(goTo(22), list);
            }
            break;
            case 59: /* reduce ACasoSimplesExpIgual */
            {
                ArrayList<Object> list = new59();
                push(goTo(23), list);
            }
            break;
            case 60: /* reduce AExpIgualExpIgual */
            {
                ArrayList<Object> list = new60();
                push(goTo(23), list);
            }
            break;
            case 61: /* reduce AExpDiferenteExpIgual */
            {
                ArrayList<Object> list = new61();
                push(goTo(23), list);
            }
            break;
            case 62: /* reduce AExpFinalExpRelacional */
            {
                ArrayList<Object> list = new62();
                push(goTo(24), list);
            }
            break;
            case 63: /* reduce AExpMenorExpRelacional */
            {
                ArrayList<Object> list = new63();
                push(goTo(24), list);
            }
            break;
            case 64: /* reduce AExpMenorIgualExpRelacional */
            {
                ArrayList<Object> list = new64();
                push(goTo(24), list);
            }
            break;
            case 65: /* reduce AExpMaiorExpRelacional */
            {
                ArrayList<Object> list = new65();
                push(goTo(24), list);
            }
            break;
            case 66: /* reduce AExpMaiorIgualExpRelacional */
            {
                ArrayList<Object> list = new66();
                push(goTo(24), list);
            }
            break;
            case 67: /* reduce AExpLogicaExpFinal */
            {
                ArrayList<Object> list = new67();
                push(goTo(25), list);
            }
            break;
            case 68: /* reduce ATerminal$Declaracao */
            {
                ArrayList<Object> list = new68();
                push(goTo(26), list);
            }
            break;
            case 69: /* reduce ANonTerminal$Declaracao */
            {
                ArrayList<Object> list = new69();
                push(goTo(26), list);
            }
            break;
            case 70: /* reduce ATerminal$Identificadores */
            {
                ArrayList<Object> list = new70();
                push(goTo(27), list);
            }
            break;
            case 71: /* reduce ANonTerminal$Identificadores */
            {
                ArrayList<Object> list = new71();
                push(goTo(27), list);
            }
            break;
            case 72: /* reduce ATerminal$Comando */
            {
                ArrayList<Object> list = new72();
                push(goTo(28), list);
            }
            break;
            case 73: /* reduce ANonTerminal$Comando */
            {
                ArrayList<Object> list = new73();
                push(goTo(28), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgramas */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramas pprogramasNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidentificadorNode2 = (TIdentificador)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pprogramasNode1 = new AProgramas(tidentificadorNode2, listNode4, listNode6);
        }
	nodeList.add(pprogramasNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ADeclaracoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAvariaveisdeclaracao1Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        {
            // Block
        PVar pvarNode3;
        pvarNode3 = (PVar)nodeArrayList3.get(0);
	if(pvarNode3 != null)
	{
	  listNode4.add(pvarNode3);
	}
        }

        pdeclaracaoNode1 = new AVariaveisDeclaracao(ptipoNode2, listNode4);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAvariaveisdeclaracao2Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        {
            // Block
        PVar pvarNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pvarNode3 = (PVar)nodeArrayList3.get(0);
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(pvarNode3 != null)
	{
	  listNode5.add(pvarNode3);
	}
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pdeclaracaoNode1 = new AVariaveisDeclaracao(ptipoNode2, listNode5);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AConstantesDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        TConst tconstNode2;
        PVar pvarNode3;
        PValor pvalorNode4;
        tconstNode2 = (TConst)nodeArrayList1.get(0);
        pvarNode3 = (PVar)nodeArrayList2.get(0);
        pvalorNode4 = (PValor)nodeArrayList3.get(0);

        pdeclaracaoNode1 = new AConstantesDeclaracao(tconstNode2, pvarNode3, pvalorNode4);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AMultiploIdentificadores */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        pvarNode1 = (PVar)nodeArrayList2.get(0);
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AIdentificadorVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);

        pvarNode1 = new AIdentificadorVar(tidentificadorNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AVetorVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        TColcheteE tcolcheteeNode3;
        TNumeroInt tnumerointNode4;
        TColcheteD tcolchetedNode5;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);
        tcolcheteeNode3 = (TColcheteE)nodeArrayList2.get(0);
        tnumerointNode4 = (TNumeroInt)nodeArrayList3.get(0);
        tcolchetedNode5 = (TColcheteD)nodeArrayList4.get(0);

        pvarNode1 = new AVetorVar(tidentificadorNode2, tcolcheteeNode3, tnumerointNode4, tcolchetedNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AStringValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        PString pstringNode2;
        pstringNode2 = (PString)nodeArrayList1.get(0);

        pvalorNode1 = new AStringValor(pstringNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AInteiroValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNumeroInt tnumerointNode2;
        tnumerointNode2 = (TNumeroInt)nodeArrayList1.get(0);

        pvalorNode1 = new AInteiroValor(tnumerointNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ARealValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNumeroReal tnumerorealNode2;
        tnumerorealNode2 = (TNumeroReal)nodeArrayList1.get(0);

        pvalorNode1 = new ARealValor(tnumerorealNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ASsimplesString */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PString pstringNode1;
        {
            // Block
        TChar tcharNode2;
        tcharNode2 = (TChar)nodeArrayList2.get(0);

        pstringNode1 = new ASsimplesString(tcharNode2);
        }
	nodeList.add(pstringNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AScharString */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PString pstringNode1;
        {
            // Block
        TCaracter tcaracterNode2;
        tcaracterNode2 = (TCaracter)nodeArrayList1.get(0);

        pstringNode1 = new AScharString(tcaracterNode2);
        }
	nodeList.add(pstringNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AInteiroTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TInteiro tinteiroNode2;
        tinteiroNode2 = (TInteiro)nodeArrayList1.get(0);

        ptipoNode1 = new AInteiroTipo(tinteiroNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AStringTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PString pstringNode2;
        pstringNode2 = (PString)nodeArrayList1.get(0);

        ptipoNode1 = new AStringTipo(pstringNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ARealTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        ptipoNode1 = new ARealTipo(trealNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ASimplesSequenciaComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AExp1ExpAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAux pexpauxNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpauxNode1 = new AExpExpAux(pexpNode2);
        }
	nodeList.add(pexpauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AExpLogica1ExpAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAux pexpauxNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        pexplogicaNode2 = (PExpLogica)nodeArrayList2.get(0);

        pexpauxNode1 = new AExpLogica1ExpAux(pexplogicaNode2);
        }
	nodeList.add(pexpauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ACasoSimplesExps */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpAux pexpauxNode1;
        pexpauxNode1 = (PExpAux)nodeArrayList1.get(0);
	if(pexpauxNode1 != null)
	{
	  listNode2.add(pexpauxNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ACasoMultiploExps */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExpAux pexpauxNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpauxNode2 = (PExpAux)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpauxNode2 != null)
	{
	  listNode3.add(pexpauxNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AVariaveisSimplesVariaveis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVar pvarNode1;
        pvarNode1 = (PVar)nodeArrayList1.get(0);
	if(pvarNode1 != null)
	{
	  listNode2.add(pvarNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AVariaveisVariaveisVariaveis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVar pvarNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvarNode2 = (PVar)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvarNode2 != null)
	{
	  listNode3.add(pvarNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ARecebeComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        PExp pexpNode3;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pcomandoNode1 = new AReceberExpComando(pvarNode2, pexpNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ARecebeExplogComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        PExpLogica pexplogicaNode3;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList3.get(0);

        pcomandoNode1 = new AReceberExplogComando(pvarNode2, pexplogicaNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AEscrevaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcomandoNode1 = new AEscrevaExpComando(pexpNode2, listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AEscrevaExplogComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcomandoNode1 = new AEscrevaExplogComando(pexplogicaNode2, listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ALeiaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pcomandoNode1 = new ALeiaComando(listNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ASeExplogComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList6.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcomandoNode1 = new ASeExplogComando(pexplogicaNode2, listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ASeExplogSenaoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList6.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList8.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pcomandoNode1 = new ASeExplogSenaoComando(pexplogicaNode2, listNode4, listNode6);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AParaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        TNumeroInt tnumerointNode3;
        TNumeroInt tnumerointNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        pvarNode2 = (PVar)nodeArrayList2.get(0);
        tnumerointNode3 = (TNumeroInt)nodeArrayList4.get(0);
        tnumerointNode4 = (TNumeroInt)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList8.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pcomandoNode1 = new AParaComando(pvarNode2, tnumerointNode3, tnumerointNode4, listNode6);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AParaPassoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        TNumeroInt tnumerointNode3;
        TNumeroInt tnumerointNode4;
        TNumeroInt tnumerointNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        pvarNode2 = (PVar)nodeArrayList2.get(0);
        tnumerointNode3 = (TNumeroInt)nodeArrayList4.get(0);
        tnumerointNode4 = (TNumeroInt)nodeArrayList6.get(0);
        tnumerointNode5 = (TNumeroInt)nodeArrayList8.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList10.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pcomandoNode1 = new AParaPassoComando(pvarNode2, tnumerointNode3, tnumerointNode4, tnumerointNode5, listNode7);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AEnquantoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExpLogica pexplogicaNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList6.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pexplogicaNode4 = (PExpLogica)nodeArrayList3.get(0);

        pcomandoNode1 = new ARepitaExplogComando(listNode3, pexplogicaNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ARepitaExplogComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExpLogica pexplogicaNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pexplogicaNode4 = (PExpLogica)nodeArrayList5.get(0);

        pcomandoNode1 = new ARepitaExplogComando(listNode3, pexplogicaNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAvalieExpComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcomandoNode1 = new AAvalieExpComando(pexpNode2, listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAvalieExplogComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcomandoNode1 = new AAvalieExplogComando(pexplogicaNode2, listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAvalieExpsnComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList8.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pcomandoNode1 = new AAvalieExpSenaoComando(pexpNode2, listNode4, listNode6);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAvalieExplogsnComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList8.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pcomandoNode1 = new AAvalieExplogSenaoComando(pexplogicaNode2, listNode4, listNode6);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AEstrCaso */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEstrCaso pestrcasoNode1;
        {
            // Block
        TCaso tcasoNode2;
        PValor pvalorNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tcasoNode2 = (TCaso)nodeArrayList1.get(0);
        pvalorNode3 = (PValor)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pestrcasoNode1 = new AEstrCaso(tcasoNode2, pvalorNode3, listNode5);
        }
	nodeList.add(pestrcasoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ACasoSimplesSequenciaCaso */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PEstrCaso pestrcasoNode1;
        pestrcasoNode1 = (PEstrCaso)nodeArrayList1.get(0);
	if(pestrcasoNode1 != null)
	{
	  listNode2.add(pestrcasoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ACasoMultiploSequenciaCaso */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PEstrCaso pestrcasoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pestrcasoNode2 = (PEstrCaso)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pestrcasoNode2 != null)
	{
	  listNode3.add(pestrcasoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ATermoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AMaisExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMaisExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AMenosExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMenosExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AFatorTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AMultTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMultExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ADivTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADivExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AVariavelFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pexpNode1 = new AVariavelExp(pvarNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AValorFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);

        pexpNode1 = new AValorExp(pvalorNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AExpFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AExpOuExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AExpNaoOuExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        TNao tnaoNode2;
        PExpLogica pexplogicaNode3;
        tnaoNode2 = (TNao)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList2.get(0);

        pexplogicaNode1 = new AExpNaoOuExpLogica(tnaoNode2, pexplogicaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ACasoSimplesExpXor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AXorExpXor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PExpLogica pexplogicaNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList3.get(0);

        pexplogicaNode1 = new AXorExpLogica(pexplogicaNode2, pexplogicaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ACasoSimplesExpOu */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AOuExpOu */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PExpLogica pexplogicaNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList3.get(0);

        pexplogicaNode1 = new AOuExpLogica(pexplogicaNode2, pexplogicaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ACasoSimplesExpE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AEExpE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PExpLogica pexplogicaNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList3.get(0);

        pexplogicaNode1 = new AEExpLogica(pexplogicaNode2, pexplogicaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ACasoSimplesExpIgual */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AExpIgualExpIgual */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexplogicaNode1 = new AExpIgualExpLogica(pexpNode2, pexpNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AExpDiferenteExpIgual */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexplogicaNode1 = new AExpDiferenteExpLogica(pexpNode2, pexpNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AExpFinalExpRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AExpMenorExpRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexplogicaNode1 = new AExpMenorExpLogica(pexpNode2, pexpNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AExpMenorIgualExpRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexplogicaNode1 = new AExpMenorIgualExpLogica(pexpNode2, pexpNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AExpMaiorExpRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexplogicaNode1 = new AExpMaiorExpLogica(pexpNode2, pexpNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AExpMaiorIgualExpRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexplogicaNode1 = new AExpMaiorIgualExpLogica(pexpNode2, pexpNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AExpLogicaExpFinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList2.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ATerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclaracao pdeclaracaoNode1;
        pdeclaracaoNode1 = (PDeclaracao)nodeArrayList1.get(0);
	if(pdeclaracaoNode1 != null)
	{
	  listNode2.add(pdeclaracaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ANonTerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeclaracao pdeclaracaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclaracaoNode2 = (PDeclaracao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclaracaoNode2 != null)
	{
	  listNode3.add(pdeclaracaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ATerminal$Identificadores */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVar pvarNode1;
        pvarNode1 = (PVar)nodeArrayList1.get(0);
	if(pvarNode1 != null)
	{
	  listNode2.add(pvarNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ANonTerminal$Identificadores */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVar pvarNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvarNode2 = (PVar)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvarNode2 != null)
	{
	  listNode3.add(pvarNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ATerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	if(pcomandoNode1 != null)
	{
	  listNode2.add(pcomandoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ANonTerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PComando pcomandoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcomandoNode2 = (PComando)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcomandoNode2 != null)
	{
	  listNode3.add(pcomandoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {12, SHIFT, 1}, },
			{{-1, ERROR, 1}, {54, SHIFT, 3}, },
			{{-1, ERROR, 2}, {82, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {5, SHIFT, 4}, },
			{{-1, ERROR, 4}, {10, SHIFT, 5}, {13, SHIFT, 6}, {25, SHIFT, 7}, {28, SHIFT, 8}, {33, SHIFT, 9}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 7}, {30, SHIFT, 15}, },
			{{-1, ERROR, 8}, {37, SHIFT, 16}, },
			{{-1, ERROR, 9}, {54, SHIFT, 17}, },
			{{-1, ERROR, 10}, {4, SHIFT, 19}, {6, SHIFT, 20}, {14, SHIFT, 21}, {16, SHIFT, 22}, {27, SHIFT, 23}, {39, SHIFT, 24}, {42, SHIFT, 25}, {54, SHIFT, 17}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 13}, {37, SHIFT, 30}, },
			{{-1, REDUCE, 1}, {10, SHIFT, 5}, {13, SHIFT, 6}, {25, SHIFT, 7}, {28, SHIFT, 8}, {33, SHIFT, 9}, },
			{{-1, ERROR, 15}, {25, SHIFT, 32}, },
			{{-1, ERROR, 16}, {73, SHIFT, 33}, },
			{{-1, REDUCE, 7}, {32, SHIFT, 34}, },
			{{-1, ERROR, 18}, {25, SHIFT, 7}, {28, SHIFT, 8}, {71, SHIFT, 35}, {72, SHIFT, 36}, },
			{{-1, ERROR, 19}, {54, SHIFT, 17}, },
			{{-1, ERROR, 20}, {64, SHIFT, 40}, },
			{{-1, ERROR, 21}, {4, SHIFT, 19}, {6, SHIFT, 20}, {14, SHIFT, 21}, {16, SHIFT, 22}, {27, SHIFT, 23}, {39, SHIFT, 24}, {42, SHIFT, 25}, {54, SHIFT, 17}, },
			{{-1, ERROR, 22}, {64, SHIFT, 43}, },
			{{-1, ERROR, 23}, {64, SHIFT, 44}, },
			{{-1, ERROR, 24}, {64, SHIFT, 45}, },
			{{-1, ERROR, 25}, {64, SHIFT, 46}, },
			{{-1, ERROR, 26}, {45, SHIFT, 47}, },
			{{-1, ERROR, 27}, {68, SHIFT, 48}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 6}, {4, SHIFT, 19}, {6, SHIFT, 20}, {14, SHIFT, 21}, {16, SHIFT, 22}, {27, SHIFT, 23}, {39, SHIFT, 24}, {42, SHIFT, 25}, {54, SHIFT, 17}, },
			{{-1, ERROR, 30}, {54, SHIFT, 17}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 32}, {67, SHIFT, 51}, },
			{{-1, ERROR, 33}, {32, SHIFT, 52}, },
			{{-1, ERROR, 34}, {71, SHIFT, 53}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 37}, {67, SHIFT, 54}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 39}, {34, SHIFT, 55}, },
			{{-1, ERROR, 40}, {54, SHIFT, 17}, },
			{{-1, ERROR, 41}, {26, SHIFT, 58}, },
			{{-1, REDUCE, 17}, {4, SHIFT, 19}, {6, SHIFT, 20}, {14, SHIFT, 21}, {16, SHIFT, 22}, {27, SHIFT, 23}, {39, SHIFT, 24}, {42, SHIFT, 25}, {54, SHIFT, 17}, },
			{{-1, ERROR, 43}, {8, SHIFT, 59}, {25, SHIFT, 7}, {28, SHIFT, 8}, {54, SHIFT, 17}, {64, SHIFT, 60}, {71, SHIFT, 35}, {72, SHIFT, 36}, },
			{{-1, ERROR, 44}, {8, SHIFT, 59}, {25, SHIFT, 7}, {28, SHIFT, 8}, {54, SHIFT, 17}, {64, SHIFT, 60}, {71, SHIFT, 35}, {72, SHIFT, 36}, },
			{{-1, ERROR, 45}, {8, SHIFT, 59}, {25, SHIFT, 7}, {28, SHIFT, 8}, {54, SHIFT, 17}, {64, SHIFT, 60}, {71, SHIFT, 35}, {72, SHIFT, 36}, },
			{{-1, ERROR, 46}, {8, SHIFT, 59}, {25, SHIFT, 7}, {28, SHIFT, 8}, {54, SHIFT, 17}, {64, SHIFT, 60}, {71, SHIFT, 35}, {72, SHIFT, 36}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 48}, {8, SHIFT, 59}, {25, SHIFT, 7}, {28, SHIFT, 8}, {54, SHIFT, 17}, {64, SHIFT, 60}, {71, SHIFT, 35}, {72, SHIFT, 36}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 50}, {67, SHIFT, 80}, {74, SHIFT, 81}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 52}, {71, SHIFT, 84}, },
			{{-1, ERROR, 53}, {31, SHIFT, 85}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 55}, {71, SHIFT, 86}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 57}, {63, SHIFT, 87}, {74, SHIFT, 88}, },
			{{-1, ERROR, 58}, {64, SHIFT, 89}, },
			{{-1, ERROR, 59}, {8, SHIFT, 59}, {25, SHIFT, 7}, {28, SHIFT, 8}, {54, SHIFT, 17}, {64, SHIFT, 60}, {71, SHIFT, 35}, {72, SHIFT, 36}, },
			{{-1, ERROR, 60}, {8, SHIFT, 59}, {25, SHIFT, 7}, {28, SHIFT, 8}, {54, SHIFT, 17}, {64, SHIFT, 60}, {71, SHIFT, 35}, {72, SHIFT, 36}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 63}, {35, SHIFT, 93}, {55, SHIFT, 94}, {57, SHIFT, 95}, {58, SHIFT, 96}, {59, SHIFT, 97}, {60, SHIFT, 98}, {61, SHIFT, 99}, {62, SHIFT, 100}, },
			{{-1, REDUCE, 42}, {36, SHIFT, 101}, {70, SHIFT, 102}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 66}, {63, SHIFT, 103}, },
			{{-1, REDUCE, 51}, {75, SHIFT, 104}, },
			{{-1, REDUCE, 53}, {9, SHIFT, 105}, },
			{{-1, REDUCE, 55}, {38, SHIFT, 106}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 73}, {35, SHIFT, 93}, {55, SHIFT, 94}, {57, SHIFT, 95}, {58, SHIFT, 96}, {59, SHIFT, 97}, {60, SHIFT, 98}, {61, SHIFT, 99}, {62, SHIFT, 100}, {63, SHIFT, 107}, },
			{{-1, ERROR, 74}, {63, SHIFT, 108}, },
			{{-1, ERROR, 75}, {63, SHIFT, 109}, },
			{{-1, ERROR, 76}, {35, SHIFT, 93}, {55, SHIFT, 94}, {57, SHIFT, 95}, {58, SHIFT, 96}, {59, SHIFT, 97}, {60, SHIFT, 98}, {61, SHIFT, 99}, {62, SHIFT, 100}, {74, SHIFT, 110}, },
			{{-1, ERROR, 77}, {74, SHIFT, 110}, },
			{{-1, ERROR, 78}, {35, SHIFT, 93}, {55, SHIFT, 94}, {57, SHIFT, 95}, {58, SHIFT, 96}, {59, SHIFT, 97}, {60, SHIFT, 98}, {61, SHIFT, 99}, {62, SHIFT, 100}, {67, SHIFT, 114}, },
			{{-1, ERROR, 79}, {67, SHIFT, 115}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 81}, {54, SHIFT, 17}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 83}, {67, SHIFT, 117}, {74, SHIFT, 81}, },
			{{-1, ERROR, 84}, {31, SHIFT, 119}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 86}, {26, SHIFT, 120}, {65, SHIFT, 121}, },
			{{-1, ERROR, 87}, {67, SHIFT, 122}, },
			{{-1, ERROR, 88}, {54, SHIFT, 17}, },
			{{-1, ERROR, 89}, {8, SHIFT, 59}, {25, SHIFT, 7}, {28, SHIFT, 8}, {54, SHIFT, 17}, {64, SHIFT, 60}, {71, SHIFT, 35}, {72, SHIFT, 36}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 91}, {35, SHIFT, 93}, {55, SHIFT, 94}, {57, SHIFT, 95}, {58, SHIFT, 96}, {59, SHIFT, 97}, {60, SHIFT, 98}, {61, SHIFT, 99}, {62, SHIFT, 100}, {63, SHIFT, 125}, },
			{{-1, ERROR, 92}, {63, SHIFT, 126}, },
			{{-1, ERROR, 93}, {25, SHIFT, 7}, {28, SHIFT, 8}, {54, SHIFT, 17}, {64, SHIFT, 127}, {71, SHIFT, 35}, {72, SHIFT, 36}, },
			{{-1, ERROR, 94}, {25, SHIFT, 7}, {28, SHIFT, 8}, {54, SHIFT, 17}, {64, SHIFT, 127}, {71, SHIFT, 35}, {72, SHIFT, 36}, },
			{{-1, ERROR, 95}, {25, SHIFT, 7}, {28, SHIFT, 8}, {54, SHIFT, 17}, {64, SHIFT, 127}, {71, SHIFT, 35}, {72, SHIFT, 36}, },
			{{-1, ERROR, 96}, {25, SHIFT, 7}, {28, SHIFT, 8}, {54, SHIFT, 17}, {64, SHIFT, 127}, {71, SHIFT, 35}, {72, SHIFT, 36}, },
			{{-1, ERROR, 97}, {25, SHIFT, 7}, {28, SHIFT, 8}, {54, SHIFT, 17}, {64, SHIFT, 127}, {71, SHIFT, 35}, {72, SHIFT, 36}, },
			{{-1, ERROR, 98}, {25, SHIFT, 7}, {28, SHIFT, 8}, {54, SHIFT, 17}, {64, SHIFT, 127}, {71, SHIFT, 35}, {72, SHIFT, 36}, },
			{{-1, ERROR, 99}, {25, SHIFT, 7}, {28, SHIFT, 8}, {54, SHIFT, 17}, {64, SHIFT, 127}, {71, SHIFT, 35}, {72, SHIFT, 36}, },
			{{-1, ERROR, 100}, {25, SHIFT, 7}, {28, SHIFT, 8}, {54, SHIFT, 17}, {64, SHIFT, 127}, {71, SHIFT, 35}, {72, SHIFT, 36}, },
			{{-1, ERROR, 101}, {25, SHIFT, 7}, {28, SHIFT, 8}, {54, SHIFT, 17}, {64, SHIFT, 127}, {71, SHIFT, 35}, {72, SHIFT, 36}, },
			{{-1, ERROR, 102}, {25, SHIFT, 7}, {28, SHIFT, 8}, {54, SHIFT, 17}, {64, SHIFT, 127}, {71, SHIFT, 35}, {72, SHIFT, 36}, },
			{{-1, ERROR, 103}, {40, SHIFT, 138}, },
			{{-1, ERROR, 104}, {25, SHIFT, 7}, {28, SHIFT, 8}, {54, SHIFT, 17}, {64, SHIFT, 60}, {71, SHIFT, 35}, {72, SHIFT, 36}, },
			{{-1, ERROR, 105}, {25, SHIFT, 7}, {28, SHIFT, 8}, {54, SHIFT, 17}, {64, SHIFT, 60}, {71, SHIFT, 35}, {72, SHIFT, 36}, },
			{{-1, ERROR, 106}, {25, SHIFT, 7}, {28, SHIFT, 8}, {54, SHIFT, 17}, {64, SHIFT, 60}, {71, SHIFT, 35}, {72, SHIFT, 36}, },
			{{-1, ERROR, 107}, {29, SHIFT, 142}, },
			{{-1, ERROR, 108}, {29, SHIFT, 142}, },
			{{-1, ERROR, 109}, {3, SHIFT, 146}, },
			{{-1, ERROR, 110}, {8, SHIFT, 59}, {25, SHIFT, 7}, {28, SHIFT, 8}, {54, SHIFT, 17}, {64, SHIFT, 60}, {71, SHIFT, 35}, {72, SHIFT, 36}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 112}, {63, SHIFT, 149}, {74, SHIFT, 110}, },
			{{-1, ERROR, 113}, {63, SHIFT, 151}, {74, SHIFT, 110}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 119}, {67, SHIFT, 152}, },
			{{-1, ERROR, 120}, {71, SHIFT, 153}, },
			{{-1, ERROR, 121}, {71, SHIFT, 154}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 124}, {63, SHIFT, 155}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 127}, {25, SHIFT, 7}, {28, SHIFT, 8}, {54, SHIFT, 17}, {64, SHIFT, 127}, {71, SHIFT, 35}, {72, SHIFT, 36}, },
			{{-1, REDUCE, 61}, {59, SHIFT, 97}, {62, SHIFT, 100}, },
			{{-1, REDUCE, 60}, {59, SHIFT, 97}, {62, SHIFT, 100}, },
			{{-1, REDUCE, 65}, {59, SHIFT, 97}, {62, SHIFT, 100}, },
			{{-1, REDUCE, 66}, {59, SHIFT, 97}, {62, SHIFT, 100}, },
			{{-1, REDUCE, 43}, {36, SHIFT, 101}, {70, SHIFT, 102}, },
			{{-1, REDUCE, 63}, {59, SHIFT, 97}, {62, SHIFT, 100}, },
			{{-1, REDUCE, 64}, {59, SHIFT, 97}, {62, SHIFT, 100}, },
			{{-1, REDUCE, 44}, {36, SHIFT, 101}, {70, SHIFT, 102}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 138}, {4, SHIFT, 19}, {6, SHIFT, 20}, {14, SHIFT, 21}, {16, SHIFT, 22}, {27, SHIFT, 23}, {39, SHIFT, 24}, {42, SHIFT, 25}, {54, SHIFT, 17}, },
			{{-1, REDUCE, 54}, {9, SHIFT, 105}, },
			{{-1, REDUCE, 56}, {38, SHIFT, 106}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 142}, {25, SHIFT, 7}, {28, SHIFT, 8}, {71, SHIFT, 35}, {72, SHIFT, 36}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 144}, {17, SHIFT, 159}, {29, SHIFT, 142}, {52, SHIFT, 160}, },
			{{-1, ERROR, 145}, {17, SHIFT, 162}, {29, SHIFT, 142}, {52, SHIFT, 163}, },
			{{-1, ERROR, 146}, {4, SHIFT, 19}, {6, SHIFT, 20}, {14, SHIFT, 21}, {16, SHIFT, 22}, {27, SHIFT, 23}, {39, SHIFT, 24}, {42, SHIFT, 25}, {54, SHIFT, 17}, },
			{{-1, REDUCE, 18}, {35, SHIFT, 93}, {55, SHIFT, 94}, {57, SHIFT, 95}, {58, SHIFT, 96}, {59, SHIFT, 97}, {60, SHIFT, 98}, {61, SHIFT, 99}, {62, SHIFT, 100}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 149}, {67, SHIFT, 165}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 151}, {67, SHIFT, 166}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 153}, {3, SHIFT, 167}, },
			{{-1, ERROR, 154}, {26, SHIFT, 168}, },
			{{-1, ERROR, 155}, {67, SHIFT, 169}, },
			{{-1, ERROR, 156}, {59, SHIFT, 97}, {62, SHIFT, 100}, {63, SHIFT, 125}, },
			{{-1, ERROR, 157}, {17, SHIFT, 170}, {50, SHIFT, 171}, },
			{{-1, ERROR, 158}, {37, SHIFT, 172}, },
			{{-1, ERROR, 159}, {37, SHIFT, 173}, },
			{{-1, ERROR, 160}, {67, SHIFT, 174}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 162}, {37, SHIFT, 175}, },
			{{-1, ERROR, 163}, {67, SHIFT, 176}, },
			{{-1, ERROR, 164}, {46, SHIFT, 177}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 167}, {4, SHIFT, 19}, {6, SHIFT, 20}, {14, SHIFT, 21}, {16, SHIFT, 22}, {27, SHIFT, 23}, {39, SHIFT, 24}, {42, SHIFT, 25}, {54, SHIFT, 17}, },
			{{-1, ERROR, 168}, {71, SHIFT, 179}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 170}, {4, SHIFT, 19}, {6, SHIFT, 20}, {14, SHIFT, 21}, {16, SHIFT, 22}, {27, SHIFT, 23}, {39, SHIFT, 24}, {42, SHIFT, 25}, {54, SHIFT, 17}, },
			{{-1, ERROR, 171}, {67, SHIFT, 181}, },
			{{-1, ERROR, 172}, {4, SHIFT, 19}, {6, SHIFT, 20}, {14, SHIFT, 21}, {16, SHIFT, 22}, {27, SHIFT, 23}, {39, SHIFT, 24}, {42, SHIFT, 25}, {54, SHIFT, 17}, },
			{{-1, ERROR, 173}, {4, SHIFT, 19}, {6, SHIFT, 20}, {14, SHIFT, 21}, {16, SHIFT, 22}, {27, SHIFT, 23}, {39, SHIFT, 24}, {42, SHIFT, 25}, {54, SHIFT, 17}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 175}, {4, SHIFT, 19}, {6, SHIFT, 20}, {14, SHIFT, 21}, {16, SHIFT, 22}, {27, SHIFT, 23}, {39, SHIFT, 24}, {42, SHIFT, 25}, {54, SHIFT, 17}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 177}, {67, SHIFT, 185}, },
			{{-1, ERROR, 178}, {2, SHIFT, 186}, },
			{{-1, ERROR, 179}, {3, SHIFT, 187}, },
			{{-1, ERROR, 180}, {50, SHIFT, 188}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 183}, {52, SHIFT, 189}, },
			{{-1, ERROR, 184}, {52, SHIFT, 190}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 186}, {67, SHIFT, 191}, },
			{{-1, ERROR, 187}, {4, SHIFT, 19}, {6, SHIFT, 20}, {14, SHIFT, 21}, {16, SHIFT, 22}, {27, SHIFT, 23}, {39, SHIFT, 24}, {42, SHIFT, 25}, {54, SHIFT, 17}, },
			{{-1, ERROR, 188}, {67, SHIFT, 193}, },
			{{-1, ERROR, 189}, {67, SHIFT, 194}, },
			{{-1, ERROR, 190}, {67, SHIFT, 195}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 192}, {2, SHIFT, 196}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 196}, {67, SHIFT, 197}, },
			{{-1, REDUCE, 32}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 10}, },
			{{-1, 11}, {14, 31}, },
			{{-1, 82}, {83, 118}, },
			{{-1, 26}, },
			{{-1, 61}, {9, 18}, {10, 27}, {19, 39}, {21, 27}, {29, 27}, {30, 50}, {40, 56}, {42, 27}, {81, 116}, {88, 123}, {138, 27}, {146, 27}, {167, 27}, {170, 27}, {172, 27}, {173, 27}, {175, 27}, {187, 27}, },
			{{-1, 62}, {18, 37}, {142, 158}, },
			{{-1, 38}, {4, 12}, {14, 12}, },
			{{-1, 13}, },
			{{-1, 41}, {138, 157}, {146, 164}, {167, 178}, {170, 180}, {172, 182}, {173, 183}, {175, 184}, {187, 192}, },
			{{-1, 111}, {112, 150}, {113, 150}, },
			{{-1, 112}, {77, 113}, },
			{{-1, 57}, },
			{{-1, 28}, {29, 49}, {42, 49}, },
			{{-1, 143}, {144, 161}, {145, 161}, },
			{{-1, 144}, {108, 145}, },
			{{-1, 63}, {44, 73}, {46, 76}, {48, 78}, {60, 91}, {93, 128}, {94, 129}, {95, 130}, {96, 131}, {98, 133}, {99, 134}, {110, 147}, {127, 156}, },
			{{-1, 64}, {97, 132}, {100, 135}, },
			{{-1, 65}, {101, 136}, {102, 137}, },
			{{-1, 66}, {44, 74}, {45, 75}, {46, 77}, {48, 79}, {59, 90}, {60, 92}, {89, 124}, {110, 148}, },
			{{-1, 67}, },
			{{-1, 68}, {104, 139}, },
			{{-1, 69}, {105, 140}, },
			{{-1, 70}, {106, 141}, },
			{{-1, 71}, },
			{{-1, 72}, },
			{{-1, 14}, },
			{{-1, 83}, },
			{{-1, 42}, {10, 29}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'programa'",
			"expecting: identificador",
			"expecting: EOF",
			"expecting: 'inicio'",
			"expecting: 'inteiro', 'real', ''', 'caracter', 'const'",
			"expecting: ':'",
			"expecting: char",
			"expecting: 'para', 'leia', 'repita', 'se', 'avalie', 'enquanto', 'escreva', identificador",
			"expecting: 'para', 'leia', 'inteiro', 'real', 'repita', 'se', ''', 'avalie', 'caracter', 'const', 'enquanto', 'escreva', identificador",
			"expecting: '''",
			"expecting: 'var_str'",
			"expecting: 'ou', ''', 'caracter', '[', 'de', '<>', '/', 'e', '=', '>', '>=', '+', '<', '<=', '-', ')', ';', '<-', '*', numero int, numero real, ',', 'xor'",
			"expecting: ''', 'caracter', numero int, numero real",
			"expecting: '('",
			"expecting: 'fim.'",
			"expecting: '<-'",
			"expecting: 'fim para', 'para', 'leia', 'repita', 'se', 'senao', 'ate', 'avalie', 'caso', 'enquanto', 'escreva', 'fim.', 'fim enquanto', 'fim se', 'fim avalie', identificador",
			"expecting: 'para', 'leia', 'repita', 'se', 'avalie', 'enquanto', 'escreva', 'fim.', identificador",
			"expecting: ';'",
			"expecting: '['",
			"expecting: numero int",
			"expecting: 'ou', '<>', '/', ':', 'e', '=', '>', '>=', '+', '<', '<=', '-', ')', ';', '*', ',', 'xor'",
			"expecting: 'de'",
			"expecting: 'ate'",
			"expecting: 'fim para', 'para', 'leia', 'repita', 'se', 'senao', 'ate', 'avalie', 'caso', 'enquanto', 'escreva', 'fim enquanto', 'fim se', 'fim avalie', identificador",
			"expecting: 'nao', ''', 'caracter', identificador, '(', numero int, numero real",
			"expecting: ';', ','",
			"expecting: ']'",
			"expecting: ')', ','",
			"expecting: 'ou', '<>', '/', 'e', '=', '>', '>=', '+', '<', '<=', '-', ')', ';', '*', ',', 'xor'",
			"expecting: '<>', '=', '>', '>=', '+', '<', '<=', '-'",
			"expecting: ')'",
			"expecting: ')', ';', ',', 'xor'",
			"expecting: 'ou', ')', ';', ',', 'xor'",
			"expecting: 'ou', 'e', ')', ';', ',', 'xor'",
			"expecting: '<>', '=', '>', '>=', '+', '<', '<=', '-', ')'",
			"expecting: '<>', '=', '>', '>=', '+', '<', '<=', '-', ','",
			"expecting: ','",
			"expecting: '<>', '=', '>', '>=', '+', '<', '<=', '-', ';'",
			"expecting: 'ou', ''', 'caracter', 'de', '<>', '/', 'e', '=', '>', '>=', '+', '<', '<=', '-', ')', ';', '<-', '*', numero int, numero real, ',', 'xor'",
			"expecting: 'ate', 'passo'",
			"expecting: ')', ';', ','",
			"expecting: ''', 'caracter', identificador, '(', numero int, numero real",
			"expecting: 'entao'",
			"expecting: 'caso'",
			"expecting: 'faca'",
			"expecting: 'ou', 'e', '+', '-', ')', ';', ',', 'xor'",
			"expecting: 'senao', 'caso', 'fim avalie'",
			"expecting: '<>', '=', '>', '>=', '+', '<', '<=', '-', ')', ','",
			"expecting: '+', '-', ')'",
			"expecting: 'senao', 'fim se'",
			"expecting: 'fim enquanto'",
			"expecting: 'fim para'",
			"expecting: 'fim se'",
			"expecting: 'fim avalie'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 5, 6, 5, 1, 7, 8, 5, 5, 8, 9, 10, 11, 12, 1, 13, 7, 13, 13, 13, 13, 14, 15, 16, 17, 1, 8, 18, 19, 20, 21, 21, 18, 21, 22, 1, 23, 24, 25, 25, 25, 25, 2, 25, 16, 26, 21, 20, 27, 8, 20, 28, 28, 13, 25, 25, 29, 29, 30, 29, 29, 31, 32, 33, 34, 34, 34, 34, 35, 31, 31, 36, 37, 38, 18, 8, 1, 26, 26, 27, 39, 40, 18, 1, 25, 41, 35, 31, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 42, 42, 42, 44, 44, 45, 25, 28, 28, 28, 16, 16, 26, 8, 26, 18, 20, 20, 16, 28, 31, 29, 34, 42, 46, 46, 46, 46, 29, 46, 46, 29, 29, 29, 7, 33, 34, 34, 12, 47, 47, 47, 7, 48, 28, 18, 28, 18, 21, 45, 23, 18, 49, 50, 5, 5, 18, 47, 5, 18, 51, 16, 16, 7, 20, 16, 7, 18, 7, 7, 16, 7, 16, 18, 52, 45, 53, 16, 47, 54, 54, 16, 18, 7, 18, 18, 18, 16, 52, 16, 16, 16, 18, 16, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
