/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiladorLFT.node;

import java.util.*;
import compiladorLFT.analysis.*;

@SuppressWarnings("nls")
public final class ASeExplogSenaoComando extends PComando
{
    private PExpLogica _expLogica_;
    private final LinkedList<PComando> _seV_ = new LinkedList<PComando>();
    private final LinkedList<PComando> _senaoF_ = new LinkedList<PComando>();

    public ASeExplogSenaoComando()
    {
        // Constructor
    }

    public ASeExplogSenaoComando(
        @SuppressWarnings("hiding") PExpLogica _expLogica_,
        @SuppressWarnings("hiding") List<?> _seV_,
        @SuppressWarnings("hiding") List<?> _senaoF_)
    {
        // Constructor
        setExpLogica(_expLogica_);

        setSeV(_seV_);

        setSenaoF(_senaoF_);

    }

    @Override
    public Object clone()
    {
        return new ASeExplogSenaoComando(
            cloneNode(this._expLogica_),
            cloneList(this._seV_),
            cloneList(this._senaoF_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASeExplogSenaoComando(this);
    }

    public PExpLogica getExpLogica()
    {
        return this._expLogica_;
    }

    public void setExpLogica(PExpLogica node)
    {
        if(this._expLogica_ != null)
        {
            this._expLogica_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expLogica_ = node;
    }

    public LinkedList<PComando> getSeV()
    {
        return this._seV_;
    }

    public void setSeV(List<?> list)
    {
        for(PComando e : this._seV_)
        {
            e.parent(null);
        }
        this._seV_.clear();

        for(Object obj_e : list)
        {
            PComando e = (PComando) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._seV_.add(e);
        }
    }

    public LinkedList<PComando> getSenaoF()
    {
        return this._senaoF_;
    }

    public void setSenaoF(List<?> list)
    {
        for(PComando e : this._senaoF_)
        {
            e.parent(null);
        }
        this._senaoF_.clear();

        for(Object obj_e : list)
        {
            PComando e = (PComando) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._senaoF_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expLogica_)
            + toString(this._seV_)
            + toString(this._senaoF_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expLogica_ == child)
        {
            this._expLogica_ = null;
            return;
        }

        if(this._seV_.remove(child))
        {
            return;
        }

        if(this._senaoF_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expLogica_ == oldChild)
        {
            setExpLogica((PExpLogica) newChild);
            return;
        }

        for(ListIterator<PComando> i = this._seV_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PComando) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PComando> i = this._senaoF_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PComando) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
